name: Proyecto con pruebas de sistema en serie

on:
  push:
    branches:
      - main

permissions:
  actions: write
  contents: write  # Necesario para hacer push al repositorio

jobs:
  despliegue:
    name: Desplegar servicios en pruebas
    runs-on: ubuntu-latest

    steps:
      - name: Obtener el código del repositorio
        uses: actions/checkout@v4

      - name: Preparar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Limpiar contenedores previos
        run: docker compose down --volumes --remove-orphans || true

      - name: Iniciar servicios Flask y MySQL
        run: |
          docker compose up -d --build
          echo "Servicios iniciados..."

      - name: Listar contenedores activos
        run: docker ps -a

      - name: Capturar logs de Flask
        run: docker logs flask > flask_logs.txt

      - name: Guardar logs como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: flask-logs
          path: flask_logs.txt

  job_1_flask:
    name: Job 1 - Verificar Flask
    runs-on: ubuntu-latest
    needs: despliegue
    steps:
      - name: Obtener el código del repositorio
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Git para commits
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Preparar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Iniciar los servicios
        run: |
          docker compose up -d
          echo "Servicios iniciados..."

      - name: Comprobar respuesta de Flask y almacenar en flask_result.txt
        run: |
          echo "Comprobando Flask desde Job 1..."
          for i in {1..5}; do
            if docker exec flask curl -s http://localhost:5000 > flask_result.txt 2>/dev/null; then
              echo "Flask respondió correctamente"
              cat flask_result.txt
              break
            else
              echo "Intento $i/5 falló, generando archivo de error..."
              echo "Error: No se pudo conectar a Flask en el intento $i" > flask_result.txt
            fi
            echo "Esperando respuesta de Flask... intento $i/5"
            sleep 10
          done
          if [ ! -f "flask_result.txt" ]; then
            echo "Error: No se pudo crear flask_result.txt" > flask_result.txt
            echo "Forzando creación de archivo con error"
          fi

      - name: Verificar y almacenar resultado en el repositorio
        run: |
          echo "Verificando que flask_result.txt existe..."
          ls -la
          cat flask_result.txt
          git add flask_result.txt
          git commit -m "Guardar resultado de Flask desde Job 1"
          git push

  job_2_mysql:
    name: Job 2 - Verificar MySQL
    runs-on: ubuntu-latest
    needs: job_1_flask
    steps:
      - name: Obtener el código del repositorio
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Actualizar el repositorio con los últimos cambios
        run: |
          echo "Actualizando el repositorio..."
          for i in {1..3}; do
            if git pull origin main; then
              echo "Repositorio actualizado con los últimos cambios."
              break
            else
              echo "Intento $i/3 falló, reintentando..."
              sleep 5
            fi
          done
          if [ $i -eq 3 ]; then
            echo "Error: No se pudo actualizar el repositorio después de 3 intentos."
            exit 1
          fi

      - name: Preparar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Iniciar los servicios
        run: |
          docker compose up -d
          echo "Servicios iniciados..."

      - name: Leer resultado de Job 1 desde el repositorio
        run: |
          echo "Leyendo el resultado de Job 1..."
          if [ -f "flask_result.txt" ]; then
            echo "Resultado de Job 1 encontrado:"
            cat flask_result.txt
          else
            echo "No se pudo encontrar el resultado de Job 1"
            exit 1
          fi

      - name: Comprobar conexión a MySQL
        run: |
          echo "Comprobando MySQL desde Job 2..."
          docker exec mysql mysqladmin ping -h localhost -uuser -puserpassword
          echo "Resultado de Flask desde Job 1:"
          cat flask_result.txt
          echo "Guardando estado de MySQL..."
          echo "MySQL está operativo" > mysql_status.txt

      - name: Guardar estado de MySQL como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: mysql-status-job-2
          path: mysql_status.txt

  run_tests:
    name: Ejecutar validaciones del sistema
    runs-on: ubuntu-latest
    needs: job_2_mysql

    steps:
      - name: Obtener el código del repositorio
        uses: actions/checkout@v4

      - name: Preparar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Iniciar los servicios
        run: |
          docker compose up -d --build
          echo "Servicios iniciados..."

      - name: Instalar dependencias de la aplicación
        run: |
          python -m pip install --upgrade pip
          pip install -r flask/requirements.txt
          pip install mysql-connector-python

      - name: Instalar dependencias de pruebas
        run: |
          pip install -r requirements-test.txt
          pip install pytest requests pytest-html

      - name: Listar contenedores activos
        run: docker ps -a

      - name: Comprobar respuesta básica de Flask
        run: |
          echo "Comprobando respuesta básica de Flask desde el contenedor..."
          docker exec flask curl --retry 5 --retry-delay 5 http://localhost:5000 || echo "Fallo al conectar, revisa los logs."

      - name: Comprobar conexión a MySQL
        run: |
          echo "Comprobando conexión a MySQL..."
          docker exec flask python -c "import mysql.connector; conn = mysql.connector.connect(host='mysql', user='user', password='userpassword', database='testdb'); print('Conexión exitosa' if conn.is_connected() else 'Fallo en la conexión'); conn.close()" || echo "Fallo al conectar a MySQL, revisa los logs."

      - name: Ejecutar pruebas automáticas y generar reporte HTML
        run: |
          cd tests
          pytest test_app.py --html=report/report.html --self-contained-html -v || echo "Pruebas fallaron, revisa el reporte."

      - name: Guardar reporte de pruebas
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reporte-pruebas
          path: tests/report/report.html